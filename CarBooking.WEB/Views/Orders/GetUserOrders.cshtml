@model IEnumerable<CarBooking.DAL.Entities.Order>

@{
    ViewBag.Title = "Orders";
}

<link href="~/Styles/enumeration.css" rel="stylesheet" />

<div>
    @{ 
            var orders = Model as List<CarBooking.DAL.Entities.Order>;
            int count = orders.Count();
            int rowCount = count / 3;
            int reminder = count % 3;
            rowCount += reminder % 3 != 0 ? 1 : 0;
            int index = 0;
            for (int row = 1; row <= rowCount; row++)
            {
            <div class="row">
                @for (int column = 1; column <= 3 && index < count; column++, index++)
                {
                    <div class="col-md-4">
                        <div class="container item-wrapper">
                            @{
                                CarBooking.DAL.Entities.Order order = orders[index];

                                <p>@string.Format("Title: {0}", order.Car.CarTitle)</p>

                                <p>@string.Format("Price: {0}$", order.Price)</p>

                                <p>@string.Format("Start Date: {0}", order.StartDate)</p>

                                <p>@string.Format("Finish Date: {0}", order.FinishDate)</p>

                                if (order.RepairPrice != null)
                                {
                                    <p>@string.Format("Repair Price: {0}$", order.RepairPrice)</p>
                                }
                                if (!string.IsNullOrEmpty(order.ManagerComment))
                                {
                                    <p>@string.Format("Manager Comment: {0}", order.ManagerComment)</p>
                                }
                                string status = string.Empty;
                                switch (order.Status)
                                {
                                    case CarBooking.DAL.Entities.Status.Created:
                                        status = "wait for manager answer";
                                        <p>@string.Format("Status: {0}", status)</p>
                                        @Html.ActionLink("Change", "Update", new { id = order.ID }, new { @class = "btn btn-primary" });
                                        <a href="#" onclick="deleteOrder(@order.ID)" class="btn btn-danger">Cancel</a>
                                        break;
                                    case CarBooking.DAL.Entities.Status.Confirmed:
                                        status = "confirmed. Wait for payment";
                                        <p>@string.Format("Status: {0}", status)</p>
                                        <a href="#" onclick="pay(@order.ID)" class="btn btn-primary">Pay</a>
                                        <a href="#" onclick="deleteOrder(@order.ID)" class="btn btn-danger">Cancel</a>
                                        break;
                                    case CarBooking.DAL.Entities.Status.NotAnswered:
                                        status = "time out. Manager not answered or you don't pay order. Please, try again";
                                        <p>@string.Format("Status: {0}", status)</p>
                                        @Html.ActionLink("Try Again", "Update", new { id = order.ID }, new { @class = "btn btn-primary" });
                                        <a href="#" onclick="deleteOrder(@order.ID)" class="btn btn-danger">Cancel</a>
                                        break;
                                    case CarBooking.DAL.Entities.Status.Refused:
                                        status = "refused. ";
                                        <p>@string.Format("Status: {0}", status)</p>
                                        @Html.ActionLink("Try Again", "Update", new { id = order.ID }, new { @class = "btn btn-primary" });
                                        <a href="#" onclick="deleteOrder(@order.ID)" class="btn btn-danger">Cancel</a>
                                        break;
                                    case CarBooking.DAL.Entities.Status.Paid:
                                        status = "paid. You can use car";
                                        <p>@string.Format("Status: {0}", status)</p>
                                        <a href="#" onclick="deleteOrder(@order.ID)" class="btn btn-danger">Cancel</a>
                                        break;
                                    case CarBooking.DAL.Entities.Status.Finished:
                                        status = "finished. Manager will check car.";
                                        <p>@string.Format("Status: {0}", status)</p>
                                        break;
                                    case CarBooking.DAL.Entities.Status.WaitPaymentForRepair:
                                        status = "car need payment for repair.";
                                        <p>@string.Format("Status: {0}", status)</p>
                                        <a href="#" onclick="payRepair(@order.ID)" class="btn btn-primary">Pay</a>
                                        break;
                                    case CarBooking.DAL.Entities.Status.RepairPaid:
                                        status = "repair was paid. Manager will finish order";
                                        <p>@string.Format("Status: {0}", status)</p>
                                        break;
                                }
                            }
                        </div>
                    </div>
                 }
            </div>
                                }
                                if(count == 0)
                                {
                                    <p class="alert alert-info">You don't have orders yet</p>
                                }
    }
</div>
<div class="delete-form-wrapper" style="display:none;">
    @using (Html.BeginForm("Delete", "Orders", FormMethod.Post, new { @id = "delete-form" }))
    {
        @Html.Hidden("id")
    }
</div>
<div class="pay-form-wrapper" style="display:none;">
    @using (Html.BeginForm("Pay", "Orders", FormMethod.Post, new { @id = "pay-form" }))
    {
        @Html.Hidden("id")
    }
</div>
<div class="pay-repair-form-wrapper" style="display:none;">
    @using (Html.BeginForm("PayRepair", "Orders", FormMethod.Post, new { @id = "pay-repair-form" }))
    {
        @Html.Hidden("id")
    }
</div>
<script>
    function deleteOrder(id) {
        document.querySelector("#delete-form #id").value = id;
        document.querySelector("#delete-form").submit();
    }
    function pay(id) {
        document.querySelector("#pay-form #id").value = id;
        document.querySelector("#pay-form").submit();
    }
    function payRepair(id) {
        document.querySelector("#pay-repair-form #id").value = id;
        document.querySelector("#pay-repair-form").submit();
    }
</script>
